import { useQueryClient } from 'react-query';
import { useCallback } from 'react';

export const useDashboardInvalidation = () => {
  const queryClient = useQueryClient();

  // Invalidar dados dos cards principais - QUERY UNIFICADA + PROJE√á√ïES
  const invalidateCards = useCallback(() => {
    console.log('üîÑ Invalidando dashboard unificado + proje√ß√µes...');
    queryClient.invalidateQueries('dashboard-unified'); // CORRE√á√ÉO: Nova query unificada
    
    // FOR√áA REFRESH nas proje√ß√µes que s√£o cr√≠ticas
    queryClient.refetchQueries('dashboard-unified');
    
    // Tamb√©m invalidar queries relacionadas
    queryClient.invalidateQueries('categorias');
    queryClient.invalidateQueries('cartoes');
    queryClient.invalidateQueries('contas');
    queryClient.invalidateQueries('transacoes-recorrentes'); // Para proje√ß√µes futuras
  }, [queryClient]);

  // Invalidar ap√≥s cria√ß√£o de transa√ß√£o
  const invalidateAfterTransaction = useCallback(() => {
    console.log('üí∞ Transa√ß√£o detectada - invalidando dashboard...');
    invalidateCards();
  }, [invalidateCards]);

  // Invalidar ap√≥s modifica√ß√£o de cart√£o
  const invalidateAfterCardUpdate = useCallback(() => {
    console.log('üí≥ Cart√£o modificado - invalidando dashboard...');
    invalidateCards();
  }, [invalidateCards]);

  // Invalidar ap√≥s modifica√ß√£o de conta
  const invalidateAfterAccountUpdate = useCallback(() => {
    console.log('üè¶ Conta modificada - invalidando dashboard...');
    invalidateCards();
  }, [invalidateCards]);

  // Invalidar ap√≥s modifica√ß√£o de transa√ß√µes recorrentes (AFETA PROJE√á√ïES)
  const invalidateAfterRecurrentUpdate = useCallback(() => {
    console.log('üîÑ Transa√ß√£o recorrente modificada - invalidando proje√ß√µes...');
    invalidateCards(); // For√ßa refresh completo das proje√ß√µes
  }, [invalidateCards]);

  // Invalidar ap√≥s modifica√ß√£o de financiamentos (AFETA PROJE√á√ïES)
  const invalidateAfterFinancingUpdate = useCallback(() => {
    console.log('üí≥ Financiamento modificado - invalidando proje√ß√µes...');
    invalidateCards(); // For√ßa refresh completo das proje√ß√µes
  }, [invalidateCards]);

  // Invalidar ao voltar de p√°ginas espec√≠ficas
  const invalidateOnReturn = useCallback((fromPage: string) => {
    console.log(`üì± Voltou de ${fromPage} - verificando invalida√ß√£o...`);
    
    // Invalidar baseado na p√°gina de origem
    switch (fromPage) {
      case 'transacoes':
      case 'faturas':
      case 'parcelas':
        invalidateAfterTransaction();
        break;
      case 'cartoes':
        invalidateAfterCardUpdate();
        break;
      case 'contas':
        invalidateAfterAccountUpdate();
        break;
      case 'transacoes-recorrentes':
      case 'planejamento':
        invalidateAfterRecurrentUpdate(); // NOVO: invalida√ß√£o espec√≠fica para recorrentes
        break;
      case 'financiamentos':
        invalidateAfterFinancingUpdate(); // NOVO: invalida√ß√£o espec√≠fica para financiamentos
        break;
      default:
        // Para outras p√°ginas, invalidar com intervalo menor (30 segundos)
        const lastInvalidation = localStorage.getItem('lastDashboardInvalidation');
        const thirtySecondsAgo = Date.now() - 30 * 1000; // REDUZIDO de 5 min para 30s
        
        if (!lastInvalidation || parseInt(lastInvalidation) < thirtySecondsAgo) {
          invalidateCards();
        }
    }
    
    // Salvar timestamp da √∫ltima invalida√ß√£o
    localStorage.setItem('lastDashboardInvalidation', Date.now().toString());
  }, [invalidateAfterTransaction, invalidateAfterCardUpdate, invalidateAfterAccountUpdate, invalidateAfterRecurrentUpdate, invalidateAfterFinancingUpdate, invalidateCards]);

  return {
    invalidateCards,
    invalidateAfterTransaction,
    invalidateAfterCardUpdate,
    invalidateAfterAccountUpdate,
    invalidateAfterRecurrentUpdate,
    invalidateAfterFinancingUpdate,
    invalidateOnReturn
  };
}; 