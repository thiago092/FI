#!/usr/bin/env python3
"""
Script para testar integra√ß√£o com Telegram localmente
Usar polling em vez de webhook para desenvolvimento local
"""

import asyncio
import httpx
import sys
import os

# Adicionar o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(__file__))

from app.services.telegram_polling_service import TelegramPollingService
from app.core.config import settings

async def main():
    print("ü§ñ Testando integra√ß√£o com Telegram")
    print(f"üì± Bot Token: {'Configurado' if settings.TELEGRAM_BOT_TOKEN else 'N√ÉO CONFIGURADO'}")
    
    if not settings.TELEGRAM_BOT_TOKEN:
        print("‚ùå Configure o TELEGRAM_BOT_TOKEN no config_local.py")
        return
    
    # Testar conex√£o com bot
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/getMe")
            data = response.json()
            
            if data.get("ok"):
                bot_info = data["result"]
                print(f"‚úÖ Bot conectado: @{bot_info['username']} ({bot_info['first_name']})")
            else:
                print(f"‚ùå Erro ao conectar bot: {data}")
                return
                
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return
    
    # Iniciar polling
    polling = TelegramPollingService()
    
    print("\nüöÄ Iniciando polling...")
    print("üìù Instru√ß√µes:")
    print("1. Acesse seu bot: https://t.me/Financeiro_app_bot")
    print("2. Digite /start")
    print("3. Pegue o c√≥digo de 6 d√≠gitos")
    print("4. No site (localhost:3001), vincule sua conta")
    print("5. Volte ao Telegram e teste enviando mensagens!")
    print("\n‚è∏Ô∏è  Pressione Ctrl+C para parar")
    
    try:
        await polling.start_polling()
    except KeyboardInterrupt:
        print("\nüõë Parando polling...")
        await polling.stop_polling()
        print("‚úÖ Finalizado!")

if __name__ == "__main__":
    asyncio.run(main()) 