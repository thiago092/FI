import httpx
import random
import string
import io
import tempfile
import os
import asyncio
import concurrent.futures
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from sqlalchemy.orm import Session
from ..core.config import settings
from ..models.user import User
from ..models.telegram_user import TelegramUser
from ..services.enhanced_chat_ai_service import enhanced_chat_service
from ..services.chat_ai_service import ChatAIService
from ..models.user import User
import logging
from openai import OpenAI

logger = logging.getLogger(__name__)

class TelegramService:
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        if not self.bot_token:
            logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN n√£o est√° configurado!")
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        # Cliente OpenAI com timeout configurado
        self.openai_client = OpenAI(
            api_key=settings.OPENAI_API_KEY,
            timeout=60.0  # 60 segundos de timeout
        )
        
    async def send_message(self, chat_id: str, text: str, parse_mode: str = "Markdown") -> bool:
        """Enviar mensagem para o usu√°rio no Telegram"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/sendMessage",
                    json={
                        "chat_id": chat_id,
                        "text": text,
                        "parse_mode": parse_mode
                    }
                )
                return response.status_code == 200
        except Exception as e:
            logger.error(f"Erro ao enviar mensagem: {e}")
            return False

    async def send_message_with_buttons(self, chat_id: str, text: str, reply_markup: dict, parse_mode: str = "Markdown") -> bool:
        """Enviar mensagem com bot√µes inline para o usu√°rio no Telegram"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/sendMessage",
                    json={
                        "chat_id": chat_id,
                        "text": text,
                        "parse_mode": parse_mode,
                        "reply_markup": reply_markup
                    }
                )
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ Mensagem com bot√µes enviada para {chat_id}")
                    return True
                else:
                    logger.error(f"‚ùå Erro ao enviar mensagem com bot√µes: {response.status_code} - {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar mensagem com bot√µes: {e}")
            return False

    async def send_photo(self, chat_id: str, photo_url: str, caption: str = "") -> bool:
        """Enviar foto para o usu√°rio no Telegram"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/sendPhoto",
                    json={
                        "chat_id": chat_id,
                        "photo": photo_url,
                        "caption": caption,
                        "parse_mode": "Markdown"
                    }
                )
                return response.status_code == 200
        except Exception as e:
            logger.error(f"Erro ao enviar foto: {e}")
            return False

    def generate_auth_code(self) -> str:
        """Gerar c√≥digo de autentica√ß√£o de 6 d√≠gitos"""
        return ''.join(random.choices(string.digits, k=6))

    def get_or_create_telegram_user(self, db: Session, telegram_data: Dict[str, Any]) -> TelegramUser:
        """Obter ou criar usu√°rio do Telegram"""
        telegram_id = str(telegram_data.get("id"))
        
        telegram_user = db.query(TelegramUser).filter(
            TelegramUser.telegram_id == telegram_id
        ).first()
        
        if not telegram_user:
            telegram_user = TelegramUser(
                telegram_id=telegram_id,
                telegram_username=telegram_data.get("username"),
                telegram_first_name=telegram_data.get("first_name"),
                telegram_last_name=telegram_data.get("last_name"),
                last_interaction=datetime.utcnow()
            )
            db.add(telegram_user)
            db.commit()
            db.refresh(telegram_user)
        else:
            # Atualizar dados do usu√°rio
            telegram_user.telegram_username = telegram_data.get("username")
            telegram_user.telegram_first_name = telegram_data.get("first_name")
            telegram_user.telegram_last_name = telegram_data.get("last_name")
            telegram_user.last_interaction = datetime.utcnow()
            db.commit()
            
        return telegram_user

    async def start_authentication(self, db: Session, telegram_user: TelegramUser) -> str:
        """Iniciar processo de autentica√ß√£o"""
        auth_code = self.generate_auth_code()
        
        telegram_user.auth_code = auth_code
        telegram_user.auth_code_expires = datetime.utcnow() + timedelta(minutes=10)
        telegram_user.is_authenticated = False
        db.commit()
        
        welcome_message = f"""
ü§ñ *Bem-vindo ao Finan√ßasAI Bot!*

Para come√ßar a usar o bot, voc√™ precisa vincular sua conta.

*C√≥digo de Autentica√ß√£o:* `{auth_code}`

*Como vincular sua conta:*
1. Acesse o site: http://localhost:3001
2. Fa√ßa login com sua conta
3. V√° em *Configura√ß√µes* ‚Üí *Telegram*
4. Digite o c√≥digo: `{auth_code}`

‚è∞ *Este c√≥digo expira em 10 minutos.*

Ap√≥s vincular sua conta, voc√™ poder√°:
‚Ä¢ üìä Enviar comprovantes de compra
‚Ä¢ üí¨ Fazer perguntas sobre suas finan√ßas
‚Ä¢ üé§ Enviar √°udios para registrar transa√ß√µes
‚Ä¢ üìà Receber an√°lises financeiras
‚Ä¢ üí∞ Registrar transa√ß√µes
"""
        
        await self.send_message(telegram_user.telegram_id, welcome_message)
        return auth_code

    def authenticate_user(self, db: Session, auth_code: str, user: User) -> Optional[TelegramUser]:
        """Autenticar usu√°rio com c√≥digo"""
        telegram_user = db.query(TelegramUser).filter(
            TelegramUser.auth_code == auth_code,
            TelegramUser.auth_code_expires > datetime.utcnow()
        ).first()
        
        if telegram_user:
            telegram_user.user_id = user.id
            telegram_user.is_authenticated = True
            telegram_user.auth_code = None
            telegram_user.auth_code_expires = None
            db.commit()
            return telegram_user
        
        return None

    async def process_message(self, db: Session, telegram_data: Dict[str, Any]) -> str:
        """Processar mensagem recebida do Telegram"""
        message = telegram_data.get("message", {})
        user_data = message.get("from", {})
        chat = message.get("chat", {})
        text = message.get("text", "")
        
        telegram_user = self.get_or_create_telegram_user(db, user_data)
        
        # Se usu√°rio n√£o est√° autenticado
        if not telegram_user.is_authenticated:
            if text.startswith("/start"):
                await self.start_authentication(db, telegram_user)
                return "auth_started"
            else:
                await self.send_message(
                    telegram_user.telegram_id,
                    "‚ùå Voc√™ precisa vincular sua conta primeiro. Digite /start para come√ßar."
                )
                return "not_authenticated"
        
        # Verificar se h√° confirma√ß√µes pendentes ANTES de processar qualquer comando
        pending_confirmations = await self._check_pending_confirmations(db, telegram_user)
        
        # Se h√° confirma√ß√µes pendentes e a mensagem pode ser uma resposta
        if pending_confirmations and self._is_potential_confirmation_response(text):
            return await self._handle_confirmation_context(db, telegram_user, text, pending_confirmations)
        
        # Usu√°rio autenticado - processar comando/mensagem normal
        if text.startswith("/"):
            return await self.process_command(db, telegram_user, text)
        else:
            return await self.process_chat_message(db, telegram_user, text)

    async def _check_pending_confirmations(self, db: Session, telegram_user: TelegramUser) -> list:
        """Verificar se h√° confirma√ß√µes pendentes para este usu√°rio"""
        try:
            from ..models.transacao_recorrente import ConfirmacaoTransacao
            from datetime import datetime
            
            confirmacoes = db.query(ConfirmacaoTransacao).filter(
                ConfirmacaoTransacao.tenant_id == telegram_user.user.tenant_id,
                ConfirmacaoTransacao.status == 'pendente',
                ConfirmacaoTransacao.expira_em > datetime.now()
            ).order_by(ConfirmacaoTransacao.criada_em.asc()).all()
            
            return confirmacoes
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar confirma√ß√µes pendentes: {e}")
            return []

    def _is_potential_confirmation_response(self, text: str) -> bool:
        """Verificar se a mensagem pode ser uma resposta de confirma√ß√£o"""
        text_clean = text.strip().lower()
        
        # Respostas num√©ricas simples
        if text_clean in ["1", "2"]:
            return True
            
        # Comandos espec√≠ficos de confirma√ß√£o
        if text_clean.startswith(("/confirmar", "/rejeitar", "/aprovar", "/cancelar")):
            return True
            
        # Respostas em portugu√™s
        confirmation_words = [
            "sim", "n√£o", "nao", "ok", "aprovar", "rejeitar", "confirmar", 
            "cancelar", "aceitar", "recusar", "yes", "no"
        ]
        
        if text_clean in confirmation_words:
            return True
            
        return False

    async def _handle_confirmation_context(self, db: Session, telegram_user: TelegramUser, text: str, confirmations: list) -> str:
        """Lidar com contexto de confirma√ß√£o ativa"""
        try:
            text_clean = text.strip().lower()
            
            # Se h√° apenas UMA confirma√ß√£o pendente, processar diretamente
            if len(confirmations) == 1:
                confirmacao = confirmations[0]
                
                if text_clean in ["1", "sim", "ok", "aprovar", "confirmar", "aceitar", "yes"]:
                    return await self._process_single_confirmation(db, confirmacao, "approve", telegram_user)
                elif text_clean in ["2", "n√£o", "nao", "rejeitar", "cancelar", "recusar", "no"]:
                    return await self._process_single_confirmation(db, confirmacao, "reject", telegram_user)
            
            # Se h√° M√öLTIPLAS confirma√ß√µes, exigir ID espec√≠fico
            elif len(confirmations) > 1:
                # Verificar se √© comando com ID espec√≠fico
                if text_clean.startswith("/confirmar "):
                    try:
                        conf_id = int(text_clean.split(" ")[1])
                        confirmacao = next((c for c in confirmations if c.id == conf_id), None)
                        if confirmacao:
                            return await self._process_single_confirmation(db, confirmacao, "approve", telegram_user)
                        else:
                            await self.send_message(telegram_user.telegram_id, f"‚ùå Confirma√ß√£o #{conf_id} n√£o encontrada ou j√° processada.")
                            return "confirmation_not_found"
                    except (IndexError, ValueError):
                        pass
                
                elif text_clean.startswith("/rejeitar "):
                    try:
                        conf_id = int(text_clean.split(" ")[1])
                        confirmacao = next((c for c in confirmations if c.id == conf_id), None)
                        if confirmacao:
                            return await self._process_single_confirmation(db, confirmacao, "reject", telegram_user)
                        else:
                            await self.send_message(telegram_user.telegram_id, f"‚ùå Confirma√ß√£o #{conf_id} n√£o encontrada ou j√° processada.")
                            return "confirmation_not_found"
                    except (IndexError, ValueError):
                        pass
                
                # Se n√£o especificou ID, mostrar lista de confirma√ß√µes
                await self._send_pending_confirmations_list(telegram_user, confirmations)
                return "multiple_confirmations_listed"
            
            # Se chegou aqui, n√£o foi poss√≠vel processar como confirma√ß√£o
            # Avisar sobre confirma√ß√µes pendentes e processar como mensagem normal
            await self._send_confirmation_reminder(telegram_user, confirmations)
            return await self.process_chat_message(db, telegram_user, text)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar contexto de confirma√ß√£o: {e}")
            return "context_error"

    async def _process_single_confirmation(self, db: Session, confirmacao, action: str, telegram_user: TelegramUser) -> str:
        """Processar uma confirma√ß√£o espec√≠fica"""
        try:
            from ..models.financial import Transacao
            from datetime import datetime
            
            agora = datetime.now()
            
            if action == "approve":
                # Criar transa√ß√£o
                nova_transacao = Transacao(
                    descricao=confirmacao.descricao,
                    valor=confirmacao.valor,
                    tipo=confirmacao.tipo,
                    data=datetime.combine(confirmacao.data_transacao, agora.time()),
                    categoria_id=confirmacao.categoria_id,
                    conta_id=confirmacao.conta_id,
                    cartao_id=confirmacao.cartao_id,
                    tenant_id=confirmacao.tenant_id,
                    created_by_name=f"{telegram_user.telegram_first_name} (Telegram)",
                    observacoes=f"Aprovada via Telegram. Confirma√ß√£o ID: {confirmacao.id}",
                    processado_por_ia=False
                )
                
                db.add(nova_transacao)
                db.flush()
                
                # Atualizar confirma√ß√£o
                confirmacao.status = 'confirmada'
                confirmacao.transacao_id = nova_transacao.id
                confirmacao.processada_em = agora
                
                db.commit()
                
                await self.send_message(
                    telegram_user.telegram_id,
                    f"‚úÖ **Confirma√ß√£o #{confirmacao.id} APROVADA**\n\nüí∞ {confirmacao.descricao}\nüíµ R$ {confirmacao.valor:.2f}\nüìÖ {confirmacao.data_transacao.strftime('%d/%m/%Y')}\n\nüéØ Transa√ß√£o criada com sucesso!"
                )
                
                return "confirmed"
                
            elif action == "reject":
                # Rejeitar
                confirmacao.status = 'cancelada'
                confirmacao.processada_em = agora
                
                db.commit()
                
                await self.send_message(
                    telegram_user.telegram_id,
                    f"‚ùå **Confirma√ß√£o #{confirmacao.id} REJEITADA**\n\nüí∞ {confirmacao.descricao}\nüíµ R$ {confirmacao.valor:.2f}\nüìÖ {confirmacao.data_transacao.strftime('%d/%m/%Y')}\n\nüö´ Transa√ß√£o n√£o ser√° criada."
                )
                
                return "rejected"
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar confirma√ß√£o: {e}")
            await self.send_message(
                telegram_user.telegram_id,
                "‚ùå Erro interno ao processar confirma√ß√£o. Tente novamente."
            )
            return "processing_error"

    async def _send_pending_confirmations_list(self, telegram_user: TelegramUser, confirmations: list):
        """Enviar lista de confirma√ß√µes pendentes"""
        message = "üìã **Voc√™ tem m√∫ltiplas confirma√ß√µes pendentes:**\n\n"
        
        for i, conf in enumerate(confirmations, 1):
            message += f"**#{conf.id}** - {conf.descricao}\n"
            message += f"üíµ R$ {conf.valor:.2f} | ‚è∞ Expira: {conf.expira_em.strftime('%H:%M')}\n\n"
        
        message += "üéØ **Para confirmar especificamente:**\n"
        message += "‚Ä¢ `/confirmar [ID]` - Ex: `/confirmar 123`\n"
        message += "‚Ä¢ `/rejeitar [ID]` - Ex: `/rejeitar 123`\n\n"
        message += "üí° **Ou use os bot√µes na mensagem original**"
        
        await self.send_message(telegram_user.telegram_id, message)

    async def _send_confirmation_reminder(self, telegram_user: TelegramUser, confirmations: list):
        """Enviar lembrete sobre confirma√ß√µes pendentes"""
        if len(confirmations) == 1:
            conf = confirmations[0]
            message = f"üí° **Lembrete:** Voc√™ tem 1 confirma√ß√£o pendente:\n\n"
            message += f"**#{conf.id}** - {conf.descricao} (R$ {conf.valor:.2f})\n"
            message += f"‚è∞ Expira: {conf.expira_em.strftime('%d/%m √†s %H:%M')}\n\n"
            message += "üéØ Use os bot√µes na mensagem ou digite:\n"
            message += f"‚Ä¢ `/confirmar {conf.id}` para aprovar\n"
            message += f"‚Ä¢ `/rejeitar {conf.id}` para rejeitar"
        else:
            message = f"üí° **Lembrete:** Voc√™ tem {len(confirmations)} confirma√ß√µes pendentes.\n\n"
            message += "üìã Digite `/confirmacoes` para ver a lista completa."
        
        await self.send_message(telegram_user.telegram_id, message)

    async def process_command(self, db: Session, telegram_user: TelegramUser, command: str) -> str:
        """Processar comandos do bot"""
        if command == "/start":
            await self.send_message(
                telegram_user.telegram_id,
                f"üëã Ol√°, {telegram_user.telegram_first_name}! Sua conta j√° est√° vinculada.\n\n" +
                "üí¨ Envie uma mensagem, üé§ √°udio ou üì∏ foto para come√ßar!"
            )
            return "start_authenticated"
        
        elif command == "/confirmacoes":
            # Listar confirma√ß√µes pendentes
            pending_confirmations = await self._check_pending_confirmations(db, telegram_user)
            
            if not pending_confirmations:
                await self.send_message(
                    telegram_user.telegram_id,
                    "‚úÖ **Nenhuma confirma√ß√£o pendente**\n\nVoc√™ n√£o tem transa√ß√µes aguardando confirma√ß√£o no momento."
                )
                return "no_pending_confirmations"
            
            await self._send_pending_confirmations_list(telegram_user, pending_confirmations)
            return "confirmations_listed"
        
        elif command == "/help":
            help_text = """
ü§ñ *Finan√ßasAI Bot - Guia Completo*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù *COMO USAR:*
Este bot entende *linguagem natural*! Converse normalmente sobre suas finan√ßas.

üí∞ *REGISTRAR TRANSA√á√ïES:*
‚Ä¢ "Gastei R$ 50 no supermercado"
‚Ä¢ "Recebi R$ 1000 de sal√°rio"
‚Ä¢ "Paguei R$ 80 de luz"

üìä *CONSULTAS FINANCEIRAS:*
‚Ä¢ "Quanto gastei este m√™s?"
‚Ä¢ "Qual meu saldo atual?"
‚Ä¢ "Gastos por categoria"
‚Ä¢ "Extrato da semana"

üîî *CONFIRMA√á√ïES DE TRANSA√á√ïES:*
‚Ä¢ `/confirmacoes` - Ver confirma√ß√µes pendentes
‚Ä¢ `/confirmar [ID]` - Aprovar transa√ß√£o espec√≠fica
‚Ä¢ `/rejeitar [ID]` - Rejeitar transa√ß√£o espec√≠fica

üé§ *√ÅUDIO:*
Envie mensagens de voz para registrar transa√ß√µes rapidamente!

üì∏ *FOTOS:*
Envie fotos de notas fiscais e comprovantes para an√°lise autom√°tica.

‚öôÔ∏è *COMANDOS:*
‚Ä¢ `/help` - Esta ajuda
‚Ä¢ `/confirmacoes` - Listar confirma√ß√µes pendentes

üí° *DICA:* Seja espec√≠fico! Quanto mais detalhes, melhor a an√°lise."""
            
            await self.send_message(telegram_user.telegram_id, help_text)
            return "help_sent"
        
        elif command == "/comandos":
            commands_text = """
üîß *Lista de Comandos Dispon√≠veis:*

/start - Iniciar bot e vincular conta
/help - Guia completo de funcionalidades
/comandos - Esta lista de comandos
/exemplos - Exemplos pr√°ticos de uso
/status - Status da sua conta
/sair - Desconectar Telegram da conta

üí° *Lembre-se:* Voc√™ pode conversar normalmente!
N√£o precisa usar comandos para registrar transa√ß√µes.
            """
            await self.send_message(telegram_user.telegram_id, commands_text)
            return "commands_sent"
        
        elif command == "/exemplos":
            examples_text = """
üìö *Exemplos Pr√°ticos:*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ *TRANSA√á√ïES SIMPLES:*
‚úçÔ∏è "Gastei 25 reais no Uber"
‚úçÔ∏è "Paguei 80 reais de farm√°cia"
‚úçÔ∏è "Recebi 150 reais de freelance"

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üîÑ *PARCELAMENTO:*
‚úçÔ∏è "Parcelei 1200 reais em 10x no cart√£o"
‚úçÔ∏è "Comprei uma TV em 6 parcelas de 200"

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä *CONSULTAS:*
‚úçÔ∏è "Quanto gastei hoje?"
‚úçÔ∏è "Saldo das contas"
‚úçÔ∏è "√öltimas 5 transa√ß√µes"
‚úçÔ∏è "Resumo desta semana"
‚úçÔ∏è "Gastei quanto em comida este m√™s?"

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üé§ *MENSAGENS DE VOZ:*
üó£Ô∏è "Oi bot, gastei quarenta e cinco reais no almo√ßo hoje no restaurante do shopping"

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üì∏ *FOTOS:*
Envie qualquer foto de:
‚Ä¢ Nota fiscal do supermercado
‚Ä¢ Comprovante do cart√£o
‚Ä¢ Cupom da farm√°cia
‚Ä¢ Recibo de combust√≠vel

O bot extrai tudo automaticamente! üéØ
            """
            await self.send_message(telegram_user.telegram_id, examples_text)
            return "examples_sent"
        
        elif command == "/status":
            user = db.query(User).filter(User.id == telegram_user.user_id).first()
            if user:
                status_text = f"""
üìä *Status da Conta:*

üë§ *Usu√°rio:* {user.full_name}
üìß *Email:* {user.email}
üîó *Conta:* Vinculada ‚úÖ
ü§ñ *Bot:* Ativo ‚úÖ

üéØ *Pronto para usar!*
Envie uma mensagem, √°udio ou foto para come√ßar.
                """
            else:
                status_text = """
‚ùå *Conta n√£o encontrada*
Tente usar /start para vincular sua conta novamente.
                """
            await self.send_message(telegram_user.telegram_id, status_text)
            return "status_sent"
        
        elif command == "/sair":
            return await self.disconnect_telegram_user(db, telegram_user)
        
        elif command == "/atualizar_menu":
            # Comando especial para atualizar menu de comandos
            success = await self.setup_bot_commands()
            if success:
                await self.send_message(
                    telegram_user.telegram_id,
                    "‚úÖ *Menu de comandos atualizado!*\n\n" +
                    "üéØ Os comandos no menu do Telegram foram sincronizados.\n\n" +
                    "üì± *Para ver o menu atualizado:*\n" +
                    "‚Ä¢ Digite `/` e veja a lista\n" +
                    "‚Ä¢ Ou clique no √≠cone de menu (‚ò∞)\n\n" +
                    "üîÑ *Comandos dispon√≠veis:*\n" +
                    "‚Ä¢ /start - Iniciar e vincular conta\n" +
                    "‚Ä¢ /help - Guia completo\n" +
                    "‚Ä¢ /comandos - Lista de comandos\n" +
                    "‚Ä¢ /exemplos - Exemplos pr√°ticos\n" +
                    "‚Ä¢ /status - Status da conta\n" +
                    "‚Ä¢ /sair - Desconectar Telegram"
                )
                return "menu_updated"
            else:
                await self.send_message(
                    telegram_user.telegram_id,
                    "‚ùå Erro ao atualizar menu de comandos. Tente novamente."
                )
                return "menu_update_failed"
        
        else:
            await self.send_message(
                telegram_user.telegram_id,
                "‚ùì Comando n√£o reconhecido.\n\n" +
                "üìã *Comandos dispon√≠veis:*\n" +
                "/help - Guia completo\n" +
                "/comandos - Lista de comandos\n" +
                "/exemplos - Exemplos pr√°ticos\n" +
                "/status - Status da conta"
            )
            return "unknown_command"

    async def process_chat_message(self, db: Session, telegram_user: TelegramUser, message: str) -> str:
        """Processar mensagem de chat comum"""
        try:
            # Verificar se √© resposta de confirma√ß√£o (1 ou 2)
            if message.strip() in ["1", "2"]:
                return await self.process_confirmation_response(db, telegram_user, message.strip())
            
            # Se n√£o for confirma√ß√£o, processar como chat normal
            if not telegram_user.user:
                await self.send_message(
                    telegram_user.telegram_id,
                    "‚ùå Erro: Conta n√£o est√° corretamente vinculada. Digite /start para reconfigurar."
                )
                return "user_not_linked"
            
            # Obter o usu√°rio associado
            user = db.query(User).filter(User.id == telegram_user.user_id).first()
            if not user:
                await self.send_message(
                    telegram_user.telegram_id,
                    "‚ùå Erro: usu√°rio n√£o encontrado. Tente vincular sua conta novamente."
                )
                return "user_not_found"
            
            # CORRE√á√ÉO: Usar tenant_id para isolamento correto de dados
            tenant_id = user.tenant_id if user.tenant_id else user.id
            
            # Debug: Log do estado atual com informa√ß√µes de tenant
            logger.info(f"üîç Processando mensagem: '{message}' para user_id: {user.id}, tenant_id: {tenant_id}")
            logger.info(f"üîç Estado do SmartMCP: awaiting_responses = {enhanced_chat_service.smart_mcp.awaiting_responses}")
            logger.info(f"üîç Estado do SmartMCP: pending_transactions = {enhanced_chat_service.smart_mcp.pending_transactions}")
            
            # Construir nome completo do usu√°rio do Telegram
            telegram_user_name = telegram_user.telegram_first_name
            if telegram_user.telegram_last_name:
                telegram_user_name += f" {telegram_user.telegram_last_name}"
            if telegram_user.telegram_username:
                telegram_user_name += f" (@{telegram_user.telegram_username})"
            
            # Usar o Enhanced Chat Service com MCP (passando tenant_id para isolamento correto)
            response = await enhanced_chat_service.process_message(
                message=message,
                user_id=tenant_id,  # CORRE√á√ÉO: usar tenant_id para isolamento de dados
                telegram_user_name=telegram_user_name  # Adicionar nome do usu√°rio do Telegram
            )
            
            # Formatar resposta para Telegram
            resposta_text = response.get('resposta', 'Desculpe, n√£o consegui processar sua mensagem.')
            
            # Se usou dados reais, adicionar indicador simples
            if response.get('fonte') == 'mcp_real_data':
                resposta_text = f"üìä {resposta_text}"
            
            # Debug: Log da mensagem antes de enviar
            logger.info(f"üì§ Enviando para Telegram: {repr(resposta_text)}")
            
            # Enviar resposta
            await self.send_message(telegram_user.telegram_id, resposta_text)
            
            # Log para debug
            logger.info(f"üí¨ Telegram MCP: {message} ‚Üí {response.get('fonte', 'generico')} (tenant: {tenant_id}, user: {telegram_user_name})")
            
            return "message_processed"
            
        except Exception as e:
            logger.error(f"Erro ao processar mensagem: {e}")
            await self.send_message(
                telegram_user.telegram_id,
                "‚ùå Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente."
            )
            return "error"

    async def process_audio(self, db: Session, telegram_data: Dict[str, Any]) -> str:
        """Processar √°udio/voice enviado pelo usu√°rio com melhor tratamento de erros"""
        message = telegram_data.get("message", {})
        user_data = message.get("from", {})
        
        # Pode ser voice ou audio
        audio_data = message.get("voice") or message.get("audio")
        
        if not audio_data:
            logger.warning("‚ùå Nenhum dado de √°udio encontrado na mensagem")
            return "no_audio"
        
        telegram_user = self.get_or_create_telegram_user(db, user_data)
        logger.info(f"üé§ Processando √°udio do usu√°rio: {telegram_user.telegram_id}")
        
        if not telegram_user.is_authenticated:
            await self.send_message(
                telegram_user.telegram_id,
                "‚ùå Voc√™ precisa vincular sua conta primeiro. Digite /start para come√ßar."
            )
            return "not_authenticated"
        
        try:
            # Enviar mensagem de processamento
            await self.send_message(
                telegram_user.telegram_id,
                "üé§ Processando seu √°udio... Um momento!"
            )
            
            # Obter arquivo de √°udio
            file_id = audio_data.get("file_id")
            file_size = audio_data.get("file_size", 0)
            duration = audio_data.get("duration", 0)
            
            logger.info(f"üé§ Arquivo: {file_id}, Tamanho: {file_size} bytes, Dura√ß√£o: {duration}s")
            
            # Verificar limite de tamanho (20MB)
            if file_size > 20 * 1024 * 1024:
                await self.send_message(
                    telegram_user.telegram_id,
                    "‚ùå Arquivo muito grande. O limite √© 20MB."
                )
                return "file_too_large"
            
            # Verificar dura√ß√£o (5 minutos)
            if duration > 300:
                await self.send_message(
                    telegram_user.telegram_id,
                    "‚ùå √Åudio muito longo. O limite √© 5 minutos."
                )
                return "audio_too_long"
            
            # Baixar arquivo com timeout
            async with httpx.AsyncClient(timeout=60.0) as client:
                logger.info(f"üé§ Obtendo informa√ß√µes do arquivo: {file_id}")
                
                # Obter informa√ß√µes do arquivo
                file_response = await client.get(f"{self.base_url}/getFile?file_id={file_id}")
                file_data = file_response.json()
                
                logger.info(f"üé§ Resposta da API: {file_data}")
                
                if not file_data.get("ok"):
                    error_msg = file_data.get("description", "Erro desconhecido")
                    logger.error(f"‚ùå Erro ao obter arquivo: {error_msg}")
                    await self.send_message(
                        telegram_user.telegram_id,
                        f"‚ùå Erro ao acessar o arquivo: {error_msg}"
                    )
                    return "file_access_error"
                
                file_path = file_data["result"]["file_path"]
                file_url = f"https://api.telegram.org/file/bot{self.bot_token}/{file_path}"
                
                logger.info(f"üé§ Baixando √°udio de: {file_url}")
                
                # Baixar conte√∫do do √°udio
                audio_response = await client.get(file_url)
                
                if audio_response.status_code != 200:
                    logger.error(f"‚ùå Erro ao baixar √°udio: Status {audio_response.status_code}")
                    await self.send_message(
                        telegram_user.telegram_id,
                        "‚ùå Erro ao baixar o arquivo de √°udio."
                    )
                    return "download_error"
                
                audio_bytes = audio_response.content
                logger.info(f"üé§ √Åudio baixado: {len(audio_bytes)} bytes")
                
                # Converter √°udio para texto usando Whisper
                logger.info("üé§ Iniciando transcri√ß√£o com Whisper...")
                text = await self._transcribe_audio(audio_bytes, file_path)
                
                if not text or text.strip() == "":
                    logger.warning("‚ùå Transcri√ß√£o retornou texto vazio")
                    await self.send_message(
                        telegram_user.telegram_id,
                        "‚ùå N√£o consegui entender o √°udio. Tente falar mais claramente ou verificar se h√° ru√≠do de fundo."
                    )
                    return "transcription_failed"
                
                logger.info(f"‚úÖ Transcri√ß√£o bem-sucedida: '{text[:100]}...'")
                
                # Mostrar texto transcrito
                await self.send_message(
                    telegram_user.telegram_id,
                    f"üìù *Entendi:* {text}\n\n‚è≥ Processando sua solicita√ß√£o..."
                )
                
                # Processar texto transcrito como se fosse uma mensagem normal
                logger.info("üé§ Enviando texto transcrito para processamento...")
                result = await self.process_chat_message(db, telegram_user, text)
                logger.info(f"‚úÖ Processamento de √°udio conclu√≠do: {result}")
                return result
                
        except asyncio.TimeoutError:
            logger.error("‚è∞ Timeout ao processar √°udio")
            await self.send_message(
                telegram_user.telegram_id,
                "‚ùå Timeout ao processar o √°udio. O arquivo pode ser muito grande ou haver problemas de conex√£o."
            )
            return "timeout_error"
            
        except Exception as e:
            logger.error(f"‚ùå Erro inesperado ao processar √°udio: {str(e)}", exc_info=True)
            await self.send_message(
                telegram_user.telegram_id,
                "‚ùå Erro inesperado ao processar o √°udio. Tente novamente em alguns instantes."
            )
            return "unexpected_error"

    async def _transcribe_audio(self, audio_bytes: bytes, file_path: str) -> Optional[str]:
        """Converter √°udio em texto usando Whisper API com melhor tratamento de erros"""
        temp_file_path = None
        try:
            # Determinar extens√£o do arquivo
            file_extension = os.path.splitext(file_path)[1] or '.ogg'
            logger.info(f"üé§ Extens√£o do arquivo: {file_extension}")
            
            # Verificar tamanho m√≠nimo
            if len(audio_bytes) < 100:
                logger.warning("‚ùå Arquivo de √°udio muito pequeno")
                return None
            
            # Criar arquivo tempor√°rio
            with tempfile.NamedTemporaryFile(suffix=file_extension, delete=False) as temp_file:
                temp_file.write(audio_bytes)
                temp_file_path = temp_file.name
            
            logger.info(f"üé§ Arquivo tempor√°rio criado: {temp_file_path}")
            
            try:
                # Usar Whisper para transcrever com timeout
                logger.info("üé§ Enviando para Whisper API...")
                
                # Executar transcri√ß√£o de forma ass√≠ncrona
                def transcribe_sync():
                    with open(temp_file_path, 'rb') as audio_file:
                        return self.openai_client.audio.transcriptions.create(
                            model="whisper-1",
                            file=audio_file,
                            language="pt",  # For√ßar portugu√™s
                            response_format="text"  # Resposta mais simples
                        )
                
                # Executar em thread separada com timeout
                loop = asyncio.get_event_loop()
                with concurrent.futures.ThreadPoolExecutor() as executor:
                    try:
                        transcription = await asyncio.wait_for(
                            loop.run_in_executor(executor, transcribe_sync),
                            timeout=45.0  # 45 segundos timeout
                        )
                        
                        logger.info("‚úÖ Transcri√ß√£o recebida da API")
                        
                        # Para response_format="text", j√° retorna string diretamente
                        if isinstance(transcription, str):
                            result = transcription.strip()
                        else:
                            result = transcription.text.strip()
                        
                        if not result:
                            logger.warning("‚ùå Transcri√ß√£o retornou texto vazio")
                            return None
                            
                        logger.info(f"‚úÖ Transcri√ß√£o: '{result[:50]}...'")
                        return result
                        
                    except asyncio.TimeoutError:
                        logger.error("‚è∞ Timeout na API do Whisper")
                        return None
                        
            except Exception as whisper_error:
                logger.error(f"‚ùå Erro espec√≠fico do Whisper: {str(whisper_error)}")
                return None
                
            finally:
                # Remover arquivo tempor√°rio
                try:
                    if temp_file_path and os.path.exists(temp_file_path):
                        os.unlink(temp_file_path)
                        logger.info("üóëÔ∏è Arquivo tempor√°rio removido")
                except Exception as cleanup_error:
                    logger.warning(f"‚ö†Ô∏è Erro ao remover arquivo tempor√°rio: {cleanup_error}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro geral na transcri√ß√£o: {str(e)}", exc_info=True)
            return None

    async def process_photo(self, db: Session, telegram_data: Dict[str, Any]) -> str:
        """Processar foto enviada pelo usu√°rio"""
        message = telegram_data.get("message", {})
        user_data = message.get("from", {})
        photo = message.get("photo", [])
        
        if not photo:
            return "no_photo"
        
        telegram_user = self.get_or_create_telegram_user(db, user_data)
        
        if not telegram_user.is_authenticated:
            await self.send_message(
                telegram_user.telegram_id,
                "‚ùå Voc√™ precisa vincular sua conta primeiro. Digite /start para come√ßar."
            )
            return "not_authenticated"
        
        try:
            # Enviar mensagem de processamento
            await self.send_message(
                telegram_user.telegram_id,
                "üì∏ Processando sua foto... Um momento!"
            )
            
            # Pegar a foto de maior resolu√ß√£o
            largest_photo = max(photo, key=lambda p: p.get("file_size", 0))
            file_id = largest_photo.get("file_id")
            
            # Obter URL do arquivo
            async with httpx.AsyncClient() as client:
                logger.info(f"üì∏ Obtendo informa√ß√µes do arquivo: {file_id}")
                file_response = await client.get(f"{self.base_url}/getFile?file_id={file_id}")
                file_data = file_response.json()
                
                logger.info(f"üì∏ Resposta da API: {file_data}")
                
                if file_data.get("ok"):
                    file_path = file_data["result"]["file_path"]
                    file_url = f"https://api.telegram.org/file/bot{self.bot_token}/{file_path}"
                    
                    logger.info(f"üì∏ Baixando arquivo de: {file_url}")
                    
                    # Baixar arquivo
                    photo_response = await client.get(file_url)
                    photo_bytes = photo_response.content
                    
                    logger.info(f"üì∏ Arquivo baixado: {len(photo_bytes)} bytes")
                    
                    # Obter o usu√°rio associado e corrigir isolamento por tenant
                    user = db.query(User).filter(User.id == telegram_user.user_id).first()
                    tenant_id_num = user.tenant_id if user.tenant_id else user.id
                    tenant_id_str = str(tenant_id_num)
                    
                    logger.info(f"üì∏ Processando com ChatAI Service para user: {user.id}, tenant: {tenant_id_num}")
                    
                    # Processar com ChatAIService mas depois integrar com estado do enhanced_chat_service
                    chat_service = ChatAIService(
                        db=db,
                        openai_api_key=settings.OPENAI_API_KEY,
                        tenant_id=tenant_id_str
                    )
                    
                    logger.info("üì∏ Chamando processar_imagem...")
                    result = await chat_service.processar_imagem(
                        file_content=photo_bytes,
                        filename="telegram_photo.jpg"
                    )
                    
                    # Verificar se ChatAI detectou uma transa√ß√£o e precisa de m√©todo de pagamento
                    if "Qual m√©todo de pagamento voc√™ usou?" in result['resposta']:
                        # Transferir estado para enhanced_chat_service para manter continuidade
                        # CORRE√á√ÉO: usar tenant_id para isolamento correto
                        enhanced_chat_service.smart_mcp.awaiting_responses[tenant_id_num] = 'pagamento'
                        
                        # Construir nome completo do usu√°rio do Telegram
                        telegram_user_name = telegram_user.telegram_first_name
                        if telegram_user.telegram_last_name:
                            telegram_user_name += f" {telegram_user.telegram_last_name}"
                        if telegram_user.telegram_username:
                            telegram_user_name += f" (@{telegram_user.telegram_username})"
                        
                        # Dados da transa√ß√£o pending v√£o para pending_transactions
                        enhanced_chat_service.smart_mcp.pending_transactions[tenant_id_num] = {
                            'valor': result.get('detalhes', {}).get('extracted_data', {}).get('valor', 0),
                            'descricao': result.get('detalhes', {}).get('extracted_data', {}).get('descricao', ''),
                            'tipo': 'SAIDA',
                            'status': 'requer_pagamento',
                            'created_by_name': telegram_user_name  # Adicionar nome do usu√°rio
                        }
                        logger.info(f"üîÑ Estado transferido para enhanced_chat_service: tenant {tenant_id_num} - tipo: pagamento, usu√°rio: {telegram_user_name}")
                    
                    response_text = result['resposta']
                    
                    logger.info(f"üì∏ Resultado da IA: {result}")
                    
                    await self.send_message(telegram_user.telegram_id, response_text)
                    logger.info("üì∏ Resposta enviada com sucesso!")
                    return "photo_processed"
                else:
                    logger.error(f"üì∏ Erro na API do Telegram: {file_data}")
                    await self.send_message(
                        telegram_user.telegram_id,
                        "‚ùå Erro ao baixar a foto do Telegram. Tente novamente."
                    )
                    return "telegram_api_error"
                
        except Exception as e:
            logger.error(f"Erro ao processar foto: {e}")
            await self.send_message(
                telegram_user.telegram_id,
                "‚ùå Erro ao processar a foto. Tente novamente."
            )
            return "error"
        
        return "photo_error"

    async def disconnect_telegram_user(self, db: Session, telegram_user: TelegramUser) -> str:
        """Desconectar usu√°rio do Telegram da conta"""
        try:
            # Obter dados do usu√°rio antes de desconectar
            user = None
            if telegram_user.user_id:
                user = db.query(User).filter(User.id == telegram_user.user_id).first()
            
            user_name = user.full_name if user else telegram_user.telegram_first_name
            
            # Limpar associa√ß√£o com a conta
            telegram_user.user_id = None
            telegram_user.is_authenticated = False
            telegram_user.auth_code = None
            telegram_user.auth_code_expires = None
            
            # Salvar altera√ß√µes
            db.commit()
            
            # Limpar estados pendentes do Smart MCP Service se existir
            from .enhanced_chat_ai_service import enhanced_chat_service
            tenant_id_to_clean = user.tenant_id if user and user.tenant_id else (user.id if user else None)
            
            if tenant_id_to_clean:
                # Limpar estados pendentes apenas deste usu√°rio/tenant
                if tenant_id_to_clean in enhanced_chat_service.smart_mcp.awaiting_responses:
                    del enhanced_chat_service.smart_mcp.awaiting_responses[tenant_id_to_clean]
                if tenant_id_to_clean in enhanced_chat_service.smart_mcp.pending_transactions:
                    del enhanced_chat_service.smart_mcp.pending_transactions[tenant_id_to_clean]
            
            # Enviar mensagem de confirma√ß√£o
            disconnect_message = f"""
üëã *Telegram Desconectado com Sucesso!*

Ol√° {user_name}! Seu Telegram foi desvinculado da conta do Finan√ßasAI.

üîì *O que aconteceu:*
‚Ä¢ Sua conta n√£o est√° mais conectada a este Telegram
‚Ä¢ N√£o ser√° mais poss√≠vel registrar/consultar transa√ß√µes
‚Ä¢ Todos os estados de conversa√ß√£o foram limpos

üîó *Para reconectar:*
‚Ä¢ Digite /start para vincular novamente
‚Ä¢ Use o mesmo c√≥digo que aparece na aplica√ß√£o web
‚Ä¢ Seus dados financeiros continuam seguros na conta

üí° *Motivos comuns para desconectar:*
‚Ä¢ Troca de celular/n√∫mero
‚Ä¢ Compartilhamento tempor√°rio do Telegram
‚Ä¢ Limpeza de seguran√ßa

‚úÖ *Seus dados est√£o seguros!*
Todas as transa√ß√µes e configura√ß√µes permanecem na sua conta web.

Obrigado por usar o Finan√ßasAI! üöÄ
            """
            
            await self.send_message(telegram_user.telegram_id, disconnect_message)
            
            logger.info(f"üîì Telegram desconectado: {telegram_user.telegram_id} (user: {user.email if user else 'N/A'})")
            
            return "telegram_disconnected"
            
        except Exception as e:
            logger.error(f"Erro ao desconectar Telegram: {e}")
            await self.send_message(
                telegram_user.telegram_id,
                "‚ùå Erro ao desconectar. Tente novamente ou contate o suporte."
            )
            return "disconnect_error"

    async def setup_bot_commands(self) -> bool:
        """Configurar comandos do menu do Telegram"""
        if not self.bot_token:
            logger.warning("‚ö†Ô∏è N√£o √© poss√≠vel configurar comandos: TELEGRAM_BOT_TOKEN n√£o configurado")
            return False
            
        try:
            # Lista de comandos que realmente funcionam no bot
            commands = [
                {
                    "command": "start",
                    "description": "üîó Iniciar e vincular sua conta"
                },
                {
                    "command": "help", 
                    "description": "üìñ Guia completo de funcionalidades"
                },
                {
                    "command": "comandos",
                    "description": "üìã Lista todos os comandos dispon√≠veis"
                },
                {
                    "command": "exemplos",
                    "description": "üí° Exemplos pr√°ticos de uso"
                },
                {
                    "command": "status",
                    "description": "üìä Status da sua conta vinculada"
                },
                {
                    "command": "sair",
                    "description": "üö™ Desconectar Telegram da conta"
                }
            ]
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/setMyCommands",
                    json={"commands": commands}
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get("ok"):
                        logger.info("‚úÖ Comandos do menu do Telegram atualizados com sucesso!")
                        return True
                    else:
                        logger.error(f"‚ùå Erro na resposta da API: {result}")
                        return False
                else:
                    logger.error(f"‚ùå Erro HTTP ao configurar comandos: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar comandos do Telegram: {e}")
            return False

    async def get_bot_info(self) -> Dict[str, Any]:
        """Obter informa√ß√µes do bot"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/getMe")
                if response.status_code == 200:
                    return response.json()
                return {}
        except Exception as e:
            logger.error(f"Erro ao obter informa√ß√µes do bot: {e}")
            return {}

    async def process_confirmation_response(self, db: Session, telegram_user: TelegramUser, response: str) -> str:
        """Processar resposta de confirma√ß√£o (1 ou 2)"""
        # Este m√©todo permanece para compatibilidade com mensagens de texto
        if response == "1":
            await self.send_message(
                telegram_user.telegram_id,
                "‚úÖ *Transa√ß√£o aprovada!*\n\nSua transa√ß√£o ser√° criada automaticamente."
            )
            return "approved"
        elif response == "2":
            await self.send_message(
                telegram_user.telegram_id,
                "‚ùå *Transa√ß√£o rejeitada!*\n\nA transa√ß√£o n√£o ser√° criada."
            )
            return "rejected"
        else:
            await self.send_message(
                telegram_user.telegram_id,
                "‚ùì Resposta n√£o compreendida. Use:\n\n*1* - Aprovar ‚úÖ\n*2* - Rejeitar ‚ùå"
            )
            return "invalid"

    async def process_confirmation_callback(self, db: Session, callback_query: dict) -> str:
        """Processar callback de bot√µes inline de confirma√ß√£o"""
        try:
            from ..models.transacao_recorrente import ConfirmacaoTransacao
            from ..models.financial import Transacao
            from datetime import datetime
            
            callback_data = callback_query.get("data", "")
            user_data = callback_query.get("from", {})
            query_id = callback_query.get("id")
            
            # Parse do callback_data: confirm_{confirmacao_id}_{action}
            parts = callback_data.split("_")
            if len(parts) != 3 or parts[0] != "confirm":
                await self._answer_callback_query(query_id, "‚ùå Comando inv√°lido", show_alert=True)
                return "invalid_command"
            
            confirmacao_id = int(parts[1])
            action = parts[2]  # approve, reject, details
            
            # Buscar usu√°rio do Telegram
            telegram_user = self.get_or_create_telegram_user(db, user_data)
            if not telegram_user.is_authenticated:
                await self._answer_callback_query(query_id, "‚ùå Usu√°rio n√£o autenticado", show_alert=True)
                return "not_authenticated"
            
            # Buscar confirma√ß√£o
            confirmacao = db.query(ConfirmacaoTransacao).filter(
                ConfirmacaoTransacao.id == confirmacao_id,
                ConfirmacaoTransacao.status == 'pendente'
            ).first()
            
            if not confirmacao:
                await self._answer_callback_query(query_id, "‚ùå Confirma√ß√£o n√£o encontrada ou j√° processada", show_alert=True)
                return "not_found"
            
            # Verificar se o usu√°rio tem permiss√£o (mesmo tenant)
            if confirmacao.tenant_id != telegram_user.user.tenant_id:
                await self._answer_callback_query(query_id, "‚ùå Sem permiss√£o para esta confirma√ß√£o", show_alert=True)
                return "no_permission"
            
            agora = datetime.now()
            
            if action == "approve":
                # Aprovar transa√ß√£o
                nova_transacao = Transacao(
                    descricao=confirmacao.descricao,
                    valor=confirmacao.valor,
                    tipo=confirmacao.tipo,
                    data=datetime.combine(confirmacao.data_transacao, agora.time()),
                    categoria_id=confirmacao.categoria_id,
                    conta_id=confirmacao.conta_id,
                    cartao_id=confirmacao.cartao_id,
                    tenant_id=confirmacao.tenant_id,
                    created_by_name=f"{telegram_user.telegram_first_name} (Telegram)",
                    observacoes=f"Aprovada via Telegram. Confirma√ß√£o ID: {confirmacao.id}",
                    processado_por_ia=False
                )
                
                db.add(nova_transacao)
                db.flush()
                
                # Atualizar confirma√ß√£o
                confirmacao.status = 'confirmada'
                confirmacao.transacao_id = nova_transacao.id
                confirmacao.processada_em = agora
                
                db.commit()
                
                # Responder ao callback
                await self._answer_callback_query(query_id, "‚úÖ Transa√ß√£o aprovada com sucesso!")
                
                # Editar mensagem original
                await self._edit_message_with_result(
                    telegram_user.telegram_id,
                    callback_query.get("message", {}).get("message_id"),
                    f"‚úÖ **APROVADA** - Confirma√ß√£o #{confirmacao_id}\n\nüí∞ {confirmacao.descricao}\nüíµ R$ {confirmacao.valor:.2f}\nüìÖ {confirmacao.data_transacao.strftime('%d/%m/%Y')}\n\nüë§ Aprovada por: {telegram_user.telegram_first_name}\n‚è∞ Em: {agora.strftime('%d/%m/%Y √†s %H:%M')}"
                )
                
                return "approved"
            
            elif action == "reject":
                # Rejeitar transa√ß√£o
                confirmacao.status = 'cancelada'
                confirmacao.processada_em = agora
                
                db.commit()
                
                # Responder ao callback
                await self._answer_callback_query(query_id, "‚ùå Transa√ß√£o rejeitada")
                
                # Editar mensagem original
                await self._edit_message_with_result(
                    telegram_user.telegram_id,
                    callback_query.get("message", {}).get("message_id"),
                    f"‚ùå **REJEITADA** - Confirma√ß√£o #{confirmacao_id}\n\nüí∞ {confirmacao.descricao}\nüíµ R$ {confirmacao.valor:.2f}\nüìÖ {confirmacao.data_transacao.strftime('%d/%m/%Y')}\n\nüë§ Rejeitada por: {telegram_user.telegram_first_name}\n‚è∞ Em: {agora.strftime('%d/%m/%Y √†s %H:%M')}"
                )
                
                return "rejected"
            
            elif action == "details":
                # Mostrar detalhes
                detalhes = f"""üìã **Detalhes da Confirma√ß√£o #{confirmacao_id}**

üí∞ **Descri√ß√£o:** {confirmacao.descricao}
üíµ **Valor:** R$ {confirmacao.valor:.2f}
üìÖ **Data:** {confirmacao.data_transacao.strftime('%d/%m/%Y')}
‚è∞ **Expira em:** {confirmacao.expira_em.strftime('%d/%m √†s %H:%M')}

üìä **Categoria:** {confirmacao.categoria.nome if confirmacao.categoria else 'N/A'}
üè¶ **Conta:** {confirmacao.conta.nome if confirmacao.conta else 'N/A'}
üí≥ **Cart√£o:** {confirmacao.cartao.nome if confirmacao.cartao else 'N/A'}

‚ö° **Status:** {confirmacao.status.upper()}
üÜî **ID:** {confirmacao.id}"""
                
                await self._answer_callback_query(query_id, detalhes, show_alert=True)
                return "details_shown"
            
            else:
                await self._answer_callback_query(query_id, "‚ùå A√ß√£o inv√°lida", show_alert=True)
                return "invalid_action"
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar callback de confirma√ß√£o: {e}")
            await self._answer_callback_query(query_id, "‚ùå Erro interno do servidor", show_alert=True)
            return "error"

    async def _answer_callback_query(self, query_id: str, text: str, show_alert: bool = False) -> bool:
        """Responder a um callback query"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/answerCallbackQuery",
                    json={
                        "callback_query_id": query_id,
                        "text": text,
                        "show_alert": show_alert
                    }
                )
                return response.status_code == 200
        except Exception as e:
            logger.error(f"‚ùå Erro ao responder callback query: {e}")
            return False

    async def _edit_message_with_result(self, chat_id: str, message_id: int, new_text: str) -> bool:
        """Editar mensagem com resultado da confirma√ß√£o"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/editMessageText",
                    json={
                        "chat_id": chat_id,
                        "message_id": message_id,
                        "text": new_text,
                        "parse_mode": "Markdown"
                    }
                )
                return response.status_code == 200
        except Exception as e:
            logger.error(f"‚ùå Erro ao editar mensagem: {e}")
            return False 