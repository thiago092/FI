"""
Smart MCP Service - Incorpora l√≥gica avan√ßada do chat antigo
Sistema inteligente de detec√ß√£o de transa√ß√µes, parcelamentos e perguntas autom√°ticas
"""
import json
import re
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timedelta
from openai import AsyncOpenAI
from sqlalchemy.orm import Session
from ..database import get_db
from ..models.financial import Transacao, Cartao, Conta, Categoria
from ..models.user import User
from ..core.config import settings
from .mcp_server import financial_mcp
import logging

logger = logging.getLogger(__name__)

class SmartMCPService:
    """MCP Service com intelig√™ncia avan√ßada"""
    
    def __init__(self):
        self.client = AsyncOpenAI(api_key=settings.OPENAI_API_KEY)
        self.mcp_server = financial_mcp
        
        # Estado para conversas multi-step
        self.pending_transactions = {}  # user_id -> dados_pendentes
        self.awaiting_responses = {}   # user_id -> tipo_aguardando
    
    async def process_message(self, message: str, user_id: int, chat_history: List[Dict] = None) -> Dict[str, Any]:
        """Processa mensagem com l√≥gica inteligente completa"""
        try:
            logger.info(f"üîç Smart MCP processando: '{message}' para user_id: {user_id}")
            
            # 1. VERIFICAR SE √â RESPOSTA A PERGUNTA ANTERIOR
            if user_id in self.awaiting_responses:
                logger.info(f"üîÑ Processando resposta aguardada para user_id: {user_id}")
                return await self._process_awaited_response(message, user_id, chat_history)
            
            # 2. DETECTAR TIPO DE MENSAGEM
            intent_result = await self._detect_smart_intent(message, user_id)
            logger.info(f"üéØ Intent detectado: {intent_result}")
            
            if not intent_result:
                logger.info(f"‚ùå Nenhum intent detectado, usando fallback")
                # Fallback para chat gen√©rico
                return await self._fallback_chat(message, user_id, chat_history)
            
            intent = intent_result['intent']
            data = intent_result['data']
            logger.info(f"‚úÖ Processando intent: {intent} com data: {data}")
            
            # 3. PROCESSAR BASEADO NA INTEN√á√ÉO
            if intent == 'transacao_incompleta':
                return await self._handle_incomplete_transaction(data, user_id)
            
            elif intent == 'transacao_sem_pagamento':
                return await self._handle_transaction_needs_payment(data, user_id)
            
            elif intent == 'parcelamento_sem_cartao':
                return await self._handle_parcelamento_needs_card(data, user_id)
            
            elif intent == 'transacao_completa':
                return await self._handle_complete_transaction(data, user_id)
                
            elif intent == 'parcelamento_completo':
                return await self._handle_complete_parcelamento(data, user_id)
            
            elif intent in ['consulta_transacoes', 'consulta_saldo', 'consulta_resumo', 'analise_gastos', 'previsao_orcamento']:
                return await self._handle_data_query(intent, data, user_id)
                
            elif intent == 'correcao_transacao':
                return await self._handle_correction(data, user_id)
                
            else:
                logger.info(f"‚ö†Ô∏è Intent n√£o reconhecido: {intent}, usando fallback")
                return await self._fallback_chat(message, user_id, chat_history)
                
        except Exception as e:
            logger.error(f"‚ùå Erro no Smart MCP: {str(e)}")
            return {
                "resposta": f"Desculpe, ocorreu um erro: {str(e)}",
                "erro": True
            }
    
    async def _detect_smart_intent(self, message: str, user_id: int) -> Optional[Dict]:
        """Detec√ß√£o inteligente de inten√ß√£o (baseado no chat antigo)"""
        
        logger.info(f"üîç Detectando intent para: '{message}'")
        
        # 1. DETECTAR TRANSA√á√ïES PRIMEIRO (mais comum)
        transaction_data = self._parse_transaction_advanced(message, user_id)
        logger.info(f"üí∞ Dados de transa√ß√£o detectados: {transaction_data}")
        if transaction_data:
            
            # Transa√ß√£o com parcelamento
            if transaction_data.get('is_parcelamento'):
                if transaction_data.get('status') == 'requer_cartao':
                    return {
                        'intent': 'parcelamento_sem_cartao',
                        'data': transaction_data
                    }
                else:
                    return {
                        'intent': 'parcelamento_completo', 
                        'data': transaction_data
                    }
            
            # Transa√ß√£o simples
            else:
                if transaction_data.get('status') == 'requer_descricao':
                    return {
                        'intent': 'transacao_incompleta',
                        'data': transaction_data
                    }
                elif transaction_data.get('status') == 'requer_pagamento':
                    return {
                        'intent': 'transacao_sem_pagamento',
                        'data': transaction_data
                    }
                else:
                    return {
                        'intent': 'transacao_completa',
                        'data': transaction_data
                    }
        
        # 2. DETECTAR CORRE√á√ïES PRIMEIRO (prioridade alta)
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["corrig", "edit", "alter", "mude", "mudan√ßa", "fix"]):
            correction_data = self._parse_correction_intent(message)
            return {'intent': 'correcao_transacao', 'data': correction_data}
        
        # 3. DETECTAR CONSULTAS
        if any(word in message_lower for word in ["transa√ß", "gasto", "despesa", "compra", "√∫ltim"]):
            params = self._extract_transaction_params(message)
            return {'intent': 'consulta_transacoes', 'data': params}
            
        elif any(word in message_lower for word in ["saldo", "quanto tenho", "dinheiro", "sobrou"]):
            return {'intent': 'consulta_saldo', 'data': {}}
            
        elif any(word in message_lower for word in ["resumo", "relat√≥rio", "m√™s", "mensal", "semana", "semanal", "di√°rio", "diario", "hoje", "ontem", "quanto gastei"]):
            params = self._extract_period_params(message)
            return {'intent': 'consulta_resumo', 'data': params}
            
        elif any(word in message_lower for word in ["an√°lise", "analise", "analisa"]):
            params = self._extract_period_params(message)
            return {'intent': 'analise_gastos', 'data': params}
            
        elif any(word in message_lower for word in ["previs√£o", "previsao", "prever", "or√ßamento"]):
            return {'intent': 'previsao_orcamento', 'data': {}}
        
        return None
    
    def _parse_transaction_advanced(self, message: str, user_id: int) -> Optional[Dict]:
        """Parser avan√ßado de transa√ß√µes (baseado no chat antigo)"""
        message_lower = message.lower().strip()
        logger.info(f"üìù Parsing transa√ß√£o para: '{message_lower}'")
        
        # 1. DETECTAR PARCELAMENTO PRIMEIRO
        parcelamento_data = self._detect_parcelamento_advanced(message_lower)
        if parcelamento_data:
            logger.info(f"üîÑ Parcelamento detectado: {parcelamento_data}")
            return parcelamento_data
        
        # 2. DETECTAR TRANSA√á√ÉO SIMPLES
        valor = self._extract_valor_regex(message_lower)
        logger.info(f"üíµ Valor extra√≠do: {valor}")
        if not valor:
            return None
        
        tipo = self._detect_tipo_transacao(message_lower)
        logger.info(f"üìä Tipo detectado: {tipo}")
        if not tipo:
            return None
            
        descricao = self._extract_descricao_advanced(message_lower, valor)
        
        # Verificar se descri√ß√£o √© suficiente
        if not descricao or len(descricao) < 2:
            return {
                'valor': valor,
                'tipo': tipo,
                'status': 'requer_descricao'
            }
        
        # Para transa√ß√µes de SAIDA, verificar m√©todo de pagamento
        cartao_id = None
        conta_id = None
        
        if tipo == "SAIDA":
            cartao_id, conta_id = self._identify_payment_method(message, user_id)
            if not cartao_id and not conta_id:
                return {
                    'valor': valor,
                    'tipo': tipo,
                    'descricao': descricao,
                    'status': 'requer_pagamento'
                }
        
        # Se chegou aqui, identificou m√©todo de pagamento ou √© ENTRADA
        return {
            'valor': valor,
            'tipo': tipo,
            'descricao': descricao,
            'cartao_id': cartao_id,
            'conta_id': conta_id,
            'status': 'completo'
        }
    
    def _detect_parcelamento_advanced(self, message: str) -> Optional[Dict]:
        """Detecta parcelamento com padr√µes avan√ßados"""
        padroes_parcelamento = [
            r'(\d+)x\s*(?:de)?\s*(\d+(?:,\d+)?(?:\.\d+)?)',  # "12x de 100"
            r'(?:em|de)\s*(\d+)\s*(?:parcelas?|vezes?)\s*(?:de)?\s*(\d+(?:,\d+)?(?:\.\d+)?)',
            r'parcel(?:ei|ar|ado)\s*em\s*(\d+)(?:x)?\s*(?:de)?\s*(\d+(?:,\d+)?(?:\.\d+)?)',
            r'(\d+)\s*(?:parcelas?|vezes?)\s*(?:de)?\s*(\d+(?:,\d+)?(?:\.\d+)?)',
            r'dividi(?:r|do)?\s*em\s*(\d+)\s*(?:de)?\s*(\d+(?:,\d+)?(?:\.\d+)?)'
        ]
        
        for padrao in padroes_parcelamento:
            match = re.search(padrao, message)
            if match:
                total_parcelas = int(match.group(1))
                valor_parcela = float(match.group(2).replace(',', '.'))
                
                if total_parcelas > 1:
                    descricao = self._extract_descricao_parcelamento(message, valor_parcela)
                    
                    return {
                        'is_parcelamento': True,
                        'total_parcelas': total_parcelas,
                        'valor_parcela': valor_parcela,
                        'valor_total': valor_parcela * total_parcelas,
                        'descricao': descricao or 'Compra parcelada',
                        'status': 'requer_cartao'
                    }
        
        return None
    
    def _extract_valor_regex(self, message: str) -> Optional[float]:
        """Extrai valor da mensagem"""
        padroes_valor = [
            r'(\d+(?:,\d+)?(?:\.\d+)?)\s*(?:reais?|r\$|real)',
            r'r\$\s*(\d+(?:,\d+)?(?:\.\d+)?)',
            r'(\d+(?:,\d+)?(?:\.\d+)?)\s*(?:conto|pila|mangos?)',
            r'(\d+(?:,\d+)?(?:\.\d+)?)' 
        ]
        
        for padrao in padroes_valor:
            match = re.search(padrao, message)
            if match:
                try:
                    return float(match.group(1).replace(',', '.'))
                except:
                    continue
        return None
    
    def _detect_tipo_transacao(self, message: str) -> Optional[str]:
        """Detecta tipo de transa√ß√£o"""
        palavras_entrada = ['recebi', 'ganhei', 'entrou', 'salario', 'sal√°rio', 'renda', 'freelance', 'freela']
        palavras_saida = ['gastei', 'gaste', 'paguei', 'pague', 'comprei', 'compre', 'saiu', 'despesa', 'gasto']
        
        for palavra in palavras_entrada:
            if palavra in message:
                return "ENTRADA"
        
        for palavra in palavras_saida:
            if palavra in message:
                return "SAIDA"
        
        return None
    
    def _extract_descricao_advanced(self, message: str, valor: float) -> str:
        """Extrai descri√ß√£o avan√ßada"""
        texto_limpo = message
        
        # Remove valores
        texto_limpo = re.sub(r'\d+(?:,\d+)?(?:\.\d+)?\s*(?:reais?|r\$|real|conto|pila|mangos?)?', '', texto_limpo)
        texto_limpo = re.sub(r'r\$\s*\d+(?:,\d+)?(?:\.\d+)?', '', texto_limpo)
        
        # Remove palavras de a√ß√£o
        palavras_acao = ['gastei', 'gaste', 'paguei', 'pague', 'comprei', 'compre', 'recebi', 'ganhei', 'saiu', 'entrou', 'de', 'no', 'na', 'com', 'para', 'em']
        for palavra in palavras_acao:
            texto_limpo = re.sub(rf'\b{palavra}\b', '', texto_limpo)
        
        # Remove preposi√ß√µes e artigos
        texto_limpo = re.sub(r'\b(o|a|os|as|um|uma|de|da|do|das|dos|em|na|no|nas|nos|com|para|por)\b', '', texto_limpo)
        
        # Limpa espa√ßos extras
        texto_limpo = ' '.join(texto_limpo.split())
        
        # Casos especiais conhecidos
        mapeamento = {
            'ifood': 'iFood', 'uber': 'Uber', 'mercado': 'Mercado',
            'supermercado': 'Supermercado', 'farmacia': 'Farm√°cia',
            'gasolina': 'Gasolina', 'salario': 'Sal√°rio', 'freela': 'Freelance',
            'freelance': 'Freelance', 'lanchonete': 'Lanchonete',
            'almo√ßo': 'Almo√ßo', 'almoco': 'Almo√ßo', 'jantar': 'Jantar', 'lanche': 'Lanche'
        }
        
        for chave, valor_map in mapeamento.items():
            if chave in message:
                return valor_map
        
        if texto_limpo and len(texto_limpo) > 1:
            return texto_limpo.title()
        
        return ""
    
    def _extract_descricao_parcelamento(self, message: str, valor_parcela: float) -> str:
        """Extrai descri√ß√£o de parcelamento"""
        texto = message
        texto = re.sub(r'\d+x\s*(?:de)?\s*\d+(?:,\d+)?(?:\.\d+)?', '', texto)
        texto = re.sub(r'(?:em|de)\s*\d+\s*(?:parcelas?|vezes?)', '', texto)
        texto = re.sub(r'parcel(?:ei|ar|ado)', '', texto)
        
        return self._extract_descricao_advanced(texto, valor_parcela)
    
    async def _find_or_create_smart_category(self, descricao: str, user_id: int) -> int:
        """Encontra ou cria categoria inteligente baseada na descri√ß√£o"""
        db = next(get_db())
        try:
            # Palavras-chave para categorias
            categorias_palavras = {
                'Alimenta√ß√£o': ['mercado', 'supermercado', 'ifood', 'food', 'comida', 'lanche', 'almo√ßo', 'almoco', 'jantar', 'caf√©', 'padaria', 'restaurante', 'lanchonete', 'pizza', 'hamburguer', 'a√ßougue', 'verdura', 'fruta'],
                'Transporte': ['uber', 'taxi', '99', 'gasolina', 'combustivel', 'onibus', '√¥nibus', 'metro', 'metr√¥', 'passagem', 'viagem', 'estacionamento'],
                'Lazer': ['cinema', 'teatro', 'show', 'festa', 'bar', 'balada', 'cerveja', 'game', 'jogo', 'streaming', 'netflix', 'spotify', 'youtube'],
                'Sa√∫de': ['farmacia', 'farm√°cia', 'medicamento', 'remedio', 'rem√©dio', 'm√©dico', 'medico', 'consulta', 'exame', 'hospital', 'dentista'],
                'Casa': ['mercado', 'supermercado', 'limpeza', 'casa', 'cozinha', 'banheiro', 'm√≥vel', 'movel', 'eletrodom√©stico', 'luz', '√°gua', 'gas', 'g√°s', 'condom√≠nio', 'condominio'],
                'Educa√ß√£o': ['curso', 'livro', 'escola', 'faculdade', 'universidade', 'material', 'caneta', 'caderno'],
                'Vestu√°rio': ['roupa', 'camisa', 'cal√ßa', 'calca', 'sapato', 't√™nis', 'tenis', 'vestido', 'shorts', 'loja']
            }
            
            descricao_lower = descricao.lower()
            
            # Buscar categoria existente que fa√ßa match
            for categoria_nome, palavras in categorias_palavras.items():
                for palavra in palavras:
                    if palavra in descricao_lower:
                        # Verificar se categoria j√° existe
                        categoria_existente = db.query(Categoria).filter(
                            Categoria.tenant_id == user_id,
                            Categoria.nome == categoria_nome
                        ).first()
                        
                        if categoria_existente:
                            logger.info(f"üè∑Ô∏è Categoria encontrada: '{descricao}' ‚Üí {categoria_nome}")
                            return categoria_existente.id
                        else:
                            # Criar nova categoria
                            nova_categoria = Categoria(
                                tenant_id=user_id,
                                nome=categoria_nome,
                                tipo="SAIDA"
                            )
                            db.add(nova_categoria)
                            db.commit()
                            db.refresh(nova_categoria)
                            logger.info(f"üÜï Nova categoria criada: '{descricao}' ‚Üí {categoria_nome}")
                            return nova_categoria.id
            
            # Se n√£o encontrou categoria espec√≠fica, criar categoria gen√©rica
            nome_categoria = self._generate_category_name(descricao)
            
            # Verificar se j√° existe
            categoria_existente = db.query(Categoria).filter(
                Categoria.tenant_id == user_id,
                Categoria.nome == nome_categoria
            ).first()
            
            if categoria_existente:
                return categoria_existente.id
                
            # Criar nova categoria
            nova_categoria = Categoria(
                tenant_id=user_id,
                nome=nome_categoria,
                tipo="SAIDA"
            )
            db.add(nova_categoria)
            db.commit()
            db.refresh(nova_categoria)
            logger.info(f"üîß Categoria gen√©rica criada: '{descricao}' ‚Üí {nome_categoria}")
            return nova_categoria.id
            
        finally:
            db.close()
    
    def _generate_category_name(self, descricao: str) -> str:
        """Gera nome de categoria baseado na descri√ß√£o"""
        # Casos comuns
        descricao_lower = descricao.lower()
        
        if any(word in descricao_lower for word in ['mercado', 'supermercado', 'comida']):
            return 'Alimenta√ß√£o'
        elif any(word in descricao_lower for word in ['uber', 'taxi', 'gasolina']):
            return 'Transporte'
        elif any(word in descricao_lower for word in ['sal√°rio', 'salario', 'freelance']):
            return 'Renda'
        else:
            # Usar primeira palavra significativa
            palavras = descricao.split()
            if palavras:
                return palavras[0].title()
            return 'Geral'

    def _identify_payment_method(self, message: str, user_id: int) -> Tuple[Optional[int], Optional[int]]:
        """Identifica cart√£o/conta mencionado na mensagem"""
        message_lower = message.lower()
        
        db = next(get_db())
        try:
            # Buscar cart√µes do usu√°rio
            cartoes = db.query(Cartao).filter(
                Cartao.tenant_id == user_id,
                Cartao.ativo == True
            ).all()
            
            # Buscar contas do usu√°rio  
            contas = db.query(Conta).filter(
                Conta.tenant_id == user_id
            ).all()
            
            # Padr√µes para detectar cart√µes
            padroes_cartao = [
                r'\bno\s+(\w+)',           # "no Nubank", "no Inter"
                r'\bcart√£o\s+(\w+)',       # "cart√£o Nubank"
                r'\bcartao\s+(\w+)',       # "cartao Inter"
                r'\bcard\s+(\w+)',         # "card Nubank"
                r'\bcom\s+(\w+)',          # "com Nubank"
            ]
            
            # Padr√µes para detectar contas
            padroes_conta = [
                r'\bna\s+conta\s+(\w+)',   # "na conta Bradesco"
                r'\bconta\s+(\w+)',        # "conta Inter"
                r'\bbanco\s+(\w+)',        # "banco Bradesco"
                r'\bpix\s+(\w+)',          # "pix Nubank"
            ]
            
            # Verificar cart√µes primeiro
            for padrao in padroes_cartao:
                import re
                match = re.search(padrao, message_lower)
                if match:
                    nome_mencionado = match.group(1)
                    
                    # Buscar cart√£o por nome (exato ou similar)
                    for cartao in cartoes:
                        if (nome_mencionado.lower() in cartao.nome.lower() or 
                            cartao.nome.lower() in nome_mencionado.lower()):
                            logger.info(f"‚úÖ Cart√£o detectado: '{nome_mencionado}' ‚Üí {cartao.nome}")
                            return cartao.id, None
            
            # Verificar contas
            for padrao in padroes_conta:
                match = re.search(padrao, message_lower)
                if match:
                    nome_mencionado = match.group(1)
                    
                    # Buscar conta por nome
                    for conta in contas:
                        if (nome_mencionado.lower() in conta.nome.lower() or 
                            conta.nome.lower() in nome_mencionado.lower()):
                            logger.info(f"‚úÖ Conta detectada: '{nome_mencionado}' ‚Üí {conta.nome}")
                            return None, conta.id
            
            # Se n√£o encontrou nada espec√≠fico, retornar None (pergunta manual)
            return None, None
            
        finally:
            db.close()
    
    def _identificar_cartao_por_numero_ou_nome(self, message: str, user_id: int) -> Optional[int]:
        """Identifica cart√£o por n√∫mero ou nome (copiado do sistema antigo)"""
        import re
        
        message_lower = message.lower().strip()
        
        # Obter cart√µes do usu√°rio
        db = next(get_db())
        try:
            cartoes = db.query(Cartao).filter(
                Cartao.tenant_id == user_id,
                Cartao.ativo == True
            ).all()
            
            if not cartoes:
                return None
            
            # Verificar se √© um n√∫mero (sele√ß√£o numerada)
            numero_match = re.search(r'\b(\d+)\b', message_lower)
            if numero_match:
                numero = int(numero_match.group(1))
                logger.info(f"üî¢ N√∫mero detectado: {numero}")
                
                # Verificar se o n√∫mero est√° dentro do range v√°lido
                if 1 <= numero <= len(cartoes):
                    cartao_selecionado = cartoes[numero - 1]  # -1 porque lista come√ßa em 0
                    logger.info(f"‚úÖ Cart√£o selecionado por n√∫mero {numero}: {cartao_selecionado.nome}")
                    return cartao_selecionado.id
                else:
                    logger.info(f"‚ùå N√∫mero {numero} fora do range v√°lido (1-{len(cartoes)})")
            
            # Verificar cart√µes - busca exata primeiro
            for cartao in sorted(cartoes, key=lambda c: len(c.nome), reverse=True):
                if cartao.nome.lower() in message_lower:
                    logger.info(f"‚úÖ Cart√£o encontrado (exato): {cartao.nome}")
                    return cartao.id
            
            # Busca por fragmentos de nome - CART√ïES
            for cartao in cartoes:
                nome_palavras = cartao.nome.lower().split()
                for palavra in nome_palavras:
                    if len(palavra) >= 3 and palavra in message_lower:  # M√≠nimo 3 caracteres
                        logger.info(f"‚úÖ Cart√£o encontrado (fragmento '{palavra}'): {cartao.nome}")
                        return cartao.id
            
            return None
            
        finally:
            db.close()
    
    async def _handle_incomplete_transaction(self, data: Dict, user_id: int) -> Dict:
        """Lida com transa√ß√£o com descri√ß√£o incompleta"""
        valor = data['valor']
        tipo = data['tipo']
        
        # Salvar dados pendentes
        self.pending_transactions[user_id] = data
        self.awaiting_responses[user_id] = 'descricao'
        
        return {
            'resposta': f"Entendi o valor de R$ {valor:.2f}. Mas sobre o que √© essa transa√ß√£o? (Ex: mercado, sal√°rio, uber...)",
            'fonte': 'mcp_interaction',
            'aguardando': 'descricao'
        }
    
    async def _handle_transaction_needs_payment(self, data: Dict, user_id: int) -> Dict:
        """Lida com transa√ß√£o que precisa de m√©todo de pagamento"""
        db = next(get_db())
        try:
            # Buscar cart√µes e contas do usu√°rio
            cartoes = db.query(Cartao).filter(Cartao.tenant_id == user_id, Cartao.ativo == True).all()
            contas = db.query(Conta).filter(Conta.tenant_id == user_id).all()
            
            if not cartoes and not contas:
                return {
                    'resposta': 'Para registrar gastos, voc√™ precisa cadastrar pelo menos um cart√£o ou conta no sistema.',
                    'fonte': 'mcp_interaction'
                }
            
            # Criar lista numerada das op√ß√µes
            opcoes = []
            indice = 1
            
            if cartoes:
                opcoes.append("**Cart√µes:**")
                for cartao in cartoes:
                    opcoes.append(f"{indice}. {cartao.nome}")
                    indice += 1
            
            if contas:
                if opcoes:
                    opcoes.append("")
                opcoes.append("**Contas:**")
                for conta in contas:
                    opcoes.append(f"{indice}. {conta.nome}")
                    indice += 1
            
            opcoes_texto = "\n".join(opcoes)
            
            # Salvar dados pendentes
            self.pending_transactions[user_id] = data
            self.awaiting_responses[user_id] = 'pagamento'
            
            descricao = data['descricao']
            valor = data['valor']
            
            return {
                'resposta': f"ü§î Entendi! {descricao} de R$ {valor:.2f}. Qual m√©todo de pagamento? {opcoes_texto}",
                'fonte': 'mcp_interaction',
                'aguardando': 'pagamento'
            }
        finally:
            db.close()
    
    async def _handle_parcelamento_needs_card(self, data: Dict, user_id: int) -> Dict:
        """Lida com parcelamento que precisa de cart√£o"""
        db = next(get_db())
        try:
            cartoes = db.query(Cartao).filter(Cartao.tenant_id == user_id, Cartao.ativo == True).all()
            
            if not cartoes:
                return {
                    'resposta': 'Para fazer parcelamentos, voc√™ precisa cadastrar pelo menos um cart√£o no sistema.',
                    'fonte': 'mcp_interaction'
                }
            
            opcoes = []
            for i, cartao in enumerate(cartoes, 1):
                opcoes.append(f"{i}. {cartao.nome}")
            
            opcoes_texto = "\n".join(opcoes)
            
            # Salvar dados pendentes
            self.pending_transactions[user_id] = data
            self.awaiting_responses[user_id] = 'cartao_parcelamento'
            
            descricao = data['descricao']
            parcelas = data['total_parcelas']
            valor_parcela = data['valor_parcela']
            valor_total = data['valor_total']
            
            return {
                'resposta': f"üí≥ {descricao} em {parcelas}x de R$ {valor_parcela:.2f} (Total: R$ {valor_total:.2f}). Em qual cart√£o? {opcoes_texto}",
                'fonte': 'mcp_interaction',
                'aguardando': 'cartao_parcelamento'
            }
        finally:
            db.close()
    
    async def _handle_complete_transaction(self, data: Dict, user_id: int) -> Dict:
        """Processa transa√ß√£o completa"""
        try:
            # CATEGORIZA√á√ÉO INTELIGENTE - buscar nome da categoria
            categoria_id = await self._find_or_create_smart_category(data['descricao'], user_id)
            
            # Buscar nome da categoria para passar ao MCP
            db = next(get_db())
            try:
                categoria = db.query(Categoria).filter(Categoria.id == categoria_id).first()
                categoria_nome = categoria.nome if categoria else None
            finally:
                db.close()
            
            # Preparar dados da transa√ß√£o
            transaction_params = {
                'descricao': data['descricao'],
                'valor': data['valor'],
                'tipo': data['tipo'],
                'categoria': categoria_nome  # Usar nome da categoria (n√£o ID)
            }
            
            # Adicionar m√©todo de pagamento se identificado
            if data.get('cartao_id'):
                transaction_params['cartao_id'] = data['cartao_id']
            if data.get('conta_id'):
                transaction_params['conta_id'] = data['conta_id']
            
            result = await self.mcp_server.process_request(
                'create_transaction',
                transaction_params,
                user_id
            )
            
            if result.get('success'):
                transaction_data = result['data']
                resposta_final = f"‚úÖ Transa√ß√£o registrada! {transaction_data['descricao']} - R$ {transaction_data['valor']:.2f} ({transaction_data.get('categoria', 'Categoria autom√°tica')})"
                logger.info(f"üìä Resposta final gerada: {repr(resposta_final)}")
                return {
                    'resposta': resposta_final,
                    'fonte': 'mcp_real_data',
                    'dados_utilizados': result
                }
            else:
                return {
                    'resposta': "‚ùå Erro ao criar transacao. Tente novamente.",
                    'fonte': 'mcp_error'
                }
                
        except Exception as e:
            return {
                'resposta': "‚ùå Erro ao processar transacao. Tente novamente.",
                'fonte': 'mcp_error'
            }
    
    async def _handle_complete_parcelamento(self, data: Dict, user_id: int) -> Dict:
        """Processa parcelamento completo (quando tem cart√£o)"""
        try:
            from datetime import datetime
            from ..api.parcelas import criar_compra_parcelada
            from ..schemas.financial import CompraParceladaCompleta
            
            # Criar usu√°rio fict√≠cio para API (como no sistema antigo)
            class TempUser:
                def __init__(self, tenant_id: int):
                    self.tenant_id = tenant_id
            
            # Obter primeiro cart√£o ativo (simplificado)
            db = next(get_db())
            try:
                cartao = db.query(Cartao).filter(
                    Cartao.tenant_id == user_id,
                    Cartao.ativo == True
                ).first()
                
                if not cartao:
                    return {
                        'resposta': '‚ùå Voc√™ precisa ter pelo menos um cart√£o cadastrado.',
                        'fonte': 'mcp_error'
                    }
                
                # Determinar categoria automaticamente
                categoria = db.query(Categoria).filter(
                    Categoria.tenant_id == user_id
                ).first()
                
                if not categoria:
                    # Criar categoria padr√£o
                    categoria = Categoria(
                        nome="Compras",
                        tenant_id=user_id
                    )
                    db.add(categoria)
                    db.commit()
                    db.refresh(categoria)
                
                # Criar objeto para API
                compra_data = CompraParceladaCompleta(
                    descricao=data['descricao'],
                    valor_total=data['valor_total'],
                    total_parcelas=data['total_parcelas'],
                    cartao_id=cartao.id,
                    data_primeira_parcela=datetime.now(),
                    categoria_id=categoria.id
                )
                
                # Chamar API para criar compra parcelada
                current_user = TempUser(user_id)
                compra_parcelada = criar_compra_parcelada(
                    compra_data=compra_data,
                    db=db,
                    current_user=current_user
                )
                
                return {
                    'resposta': f"üéâ Parcelamento criado! {data['descricao']} - R$ {data['valor_total']:.2f} em {data['total_parcelas']}x de R$ {data['valor_parcela']:.2f} no {cartao.nome}",
                    'fonte': 'mcp_real_data',
                    'parcelamento_criado': True,
                    'compra_parcelada_id': compra_parcelada.id
                }
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar parcelamento: {str(e)}")
            return {
                'resposta': f'‚ùå Erro ao criar parcelamento: {str(e)}',
                'fonte': 'mcp_error'
            }
    
    async def _handle_data_query(self, intent: str, data: Dict, user_id: int) -> Dict:
        """Processa consultas de dados"""
        try:
            logger.info(f"üîç Processando consulta: {intent} com data: {data}")
            
            # Mapear intent para tool MCP correto
            if intent == 'consulta_saldo':
                tool_name = 'get_balance'
            elif intent == 'consulta_transacoes':
                tool_name = 'get_transactions'
            elif intent == 'consulta_resumo':
                # Decidir tool baseado no per√≠odo solicitado
                periodo = data.get('periodo', '30d')
                if periodo in ['1d', '7d']:
                    # Para per√≠odos curtos, usar get_transactions
                    tool_name = 'get_transactions'
                    if not data.get('limit'):
                        data['limit'] = 50  # Limite maior para resumos
                else:
                    # Para per√≠odos longos (m√™s), usar get_monthly_summary
                    tool_name = 'get_monthly_summary'
                    # Converter per√≠odo para mes/ano se necess√°rio
                    if 'mes' not in data:
                        from datetime import datetime
                        now = datetime.now()
                        data['mes'] = now.month
                        data['ano'] = now.year
            elif intent == 'analise_gastos':
                tool_name = 'analyze_spending'
            elif intent == 'previsao_orcamento':
                tool_name = 'predict_budget'
            else:
                tool_name = 'get_balance'
            
            logger.info(f"üõ†Ô∏è Chamando MCP tool: {tool_name} com params: {data}")
            result = await self.mcp_server.process_request(tool_name, data, user_id)
            logger.info(f"üìä Resultado MCP: {result}")
            
            if result.get('success'):
                # Gerar resposta natural com IA
                response = await self._generate_response_with_data(intent, result, data)
                return {
                    'resposta': response,
                    'fonte': 'mcp_real_data',
                    'dados_utilizados': result,
                    'intent': intent
                }
            else:
                error_msg = result.get('error', 'Erro desconhecido')
                logger.error(f"‚ùå Erro MCP: {error_msg}")
                return {
                    'resposta': f"Erro na consulta: {error_msg}",
                    'fonte': 'mcp_error'
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao consultar dados: {str(e)}")
            return {
                'resposta': f"Erro ao consultar dados: {str(e)}",
                'fonte': 'mcp_error'
            }
    
    async def _process_awaited_response(self, message: str, user_id: int, chat_history: List[Dict]) -> Dict:
        """Processa resposta aguardada do usu√°rio"""
        if user_id not in self.awaiting_responses:
            return await self._fallback_chat(message, user_id, chat_history)
        
        awaiting_type = self.awaiting_responses[user_id]
        pending_data = self.pending_transactions.get(user_id, {})
        
        # Limpar estado
        del self.awaiting_responses[user_id]
        if user_id in self.pending_transactions:
            del self.pending_transactions[user_id]
        
        if awaiting_type == 'descricao':
            # Completar transa√ß√£o com nova descri√ß√£o
            pending_data['descricao'] = message.strip()
            pending_data['status'] = 'completo'
            return await self._handle_complete_transaction(pending_data, user_id)
        
        elif awaiting_type == 'pagamento':
            # Processar sele√ß√£o de m√©todo de pagamento
            db = next(get_db())
            try:
                # Buscar cart√µes e contas do usu√°rio
                cartoes = db.query(Cartao).filter(Cartao.tenant_id == user_id, Cartao.ativo == True).all()
                contas = db.query(Conta).filter(Conta.tenant_id == user_id).all()
                
                # Tentar identificar por n√∫mero
                try:
                    numero = int(message.strip())
                    indice = numero - 1  # Converter para √≠ndice 0-based
                    
                    # Determinar se √© cart√£o ou conta
                    total_cartoes = len(cartoes)
                    
                    if 0 <= indice < total_cartoes:
                        # √â um cart√£o
                        cartao_selecionado = cartoes[indice]
                        pending_data['cartao_id'] = cartao_selecionado.id
                        logger.info(f"‚úÖ Cart√£o selecionado por n√∫mero {numero}: {cartao_selecionado.nome}")
                    elif 0 <= (indice - total_cartoes) < len(contas):
                        # √â uma conta
                        conta_selecionada = contas[indice - total_cartoes]
                        pending_data['conta_id'] = conta_selecionada.id
                        logger.info(f"‚úÖ Conta selecionada por n√∫mero {numero}: {conta_selecionada.nome}")
                    else:
                        return {
                            'resposta': f'‚ùå N√∫mero {numero} inv√°lido. Por favor, escolha um n√∫mero entre 1 e {total_cartoes + len(contas)}.',
                            'fonte': 'mcp_interaction'
                        }
                        
                except ValueError:
                    # N√£o √© um n√∫mero, tentar identificar por nome
                    cartao_id = self._identificar_cartao_por_numero_ou_nome(message, user_id)
                    if cartao_id:
                        pending_data['cartao_id'] = cartao_id
                    else:
                        return {
                            'resposta': '‚ùå M√©todo de pagamento n√£o reconhecido. Tente novamente com o n√∫mero ou nome.',
                            'fonte': 'mcp_interaction'
                        }
                
                pending_data['status'] = 'completo'
                return await self._handle_complete_transaction(pending_data, user_id)
                
            finally:
                db.close()
        
        elif awaiting_type == 'cartao_parcelamento':
            # Processar sele√ß√£o de cart√£o para parcelamento
            cartao_id = self._identificar_cartao_por_numero_ou_nome(message, user_id)
            if cartao_id:
                pending_data['cartao_id'] = cartao_id
                return await self._handle_complete_parcelamento(pending_data, user_id)
            else:
                return {
                    'resposta': '‚ùå Cart√£o n√£o encontrado. Tente novamente com o n√∫mero ou nome do cart√£o.',
                    'fonte': 'mcp_interaction'
                }
        
        return await self._fallback_chat(message, user_id, chat_history)
    
    async def _generate_response_with_data(self, intent: str, mcp_result: Dict, original_data: Dict) -> str:
        """Gera resposta natural usando dados MCP"""
        data = mcp_result.get("data", {})
        
        context = f"""
        Dados financeiros reais do usu√°rio:
        {json.dumps(data, indent=2, ensure_ascii=False)}
        
        Tipo de consulta: {intent}
        
        Responda de forma natural e amig√°vel, usando os dados fornecidos.
        Seja espec√≠fico com n√∫meros e datas.
        Use emojis quando apropriado.
        """
        
        messages = [
            {"role": "system", "content": "Voc√™ √© um assistente financeiro que responde com dados reais do usu√°rio."},
            {"role": "user", "content": context}
        ]
        
        response = await self.client.chat.completions.create(
            model="gpt-4",
            messages=messages,
            max_tokens=500,
            temperature=0.7
        )
        
        return response.choices[0].message.content
    
    async def _fallback_chat(self, message: str, user_id: int, chat_history: List[Dict] = None) -> Dict:
        """Chat gen√©rico quando n√£o detecta inten√ß√£o espec√≠fica"""
        messages = [
            {"role": "system", "content": "Voc√™ √© um assistente financeiro amig√°vel. Ajude com d√∫vidas sobre finan√ßas pessoais."},
            {"role": "user", "content": message}
        ]
        
        if chat_history:
            for msg in chat_history[-3:]:
                messages.insert(-1, {"role": "user", "content": msg.get("pergunta", "")})
                messages.insert(-1, {"role": "assistant", "content": msg.get("resposta", "")})
        
        response = await self.client.chat.completions.create(
            model="gpt-4",
            messages=messages,
            max_tokens=300,
            temperature=0.7
        )
        
        return {
            "resposta": response.choices[0].message.content,
            "fonte": "chat_generico"
        }
    
    def _extract_transaction_params(self, message: str) -> Dict:
        """Extrai par√¢metros para consulta de transa√ß√µes"""
        params = {"limit": 10}
        
        # Extrair categoria
        if "alimenta" in message.lower():
            params["categoria"] = "alimenta√ß√£o"
        elif "transport" in message.lower():
            params["categoria"] = "transporte"
        elif "lazer" in message.lower():
            params["categoria"] = "lazer"
        
        # Extrair per√≠odo
        if "hoje" in message.lower() or "dia" in message.lower() or "di√°rio" in message.lower() or "diario" in message.lower():
            params["periodo"] = "1d"
        elif "ontem" in message.lower():
            params["periodo"] = "1d"
            params["offset_dias"] = 1
        elif "semana" in message.lower():
            params["periodo"] = "7d"
        elif "quinzena" in message.lower():
            params["periodo"] = "15d"
        elif "m√™s" in message.lower():
            params["periodo"] = "30d"
        
        return params
    
    def _extract_period_params(self, message: str) -> Dict:
        """Extrai par√¢metros de per√≠odo"""
        params = {}
        
        # Extrair per√≠odo 
        if "hoje" in message.lower() or "dia" in message.lower() or "di√°rio" in message.lower() or "diario" in message.lower():
            params["periodo"] = "1d"
        elif "ontem" in message.lower():
            params["periodo"] = "1d"
            params["offset_dias"] = 1  # Para buscar dia anterior
        elif "semana" in message.lower():
            params["periodo"] = "7d"
        elif "quinzena" in message.lower():
            params["periodo"] = "15d"
        elif "m√™s" in message.lower() or "mes" in message.lower():
            params["periodo"] = "30d"
        
        # Extrair m√™s espec√≠fico
        meses = {
            "janeiro": 1, "fevereiro": 2, "mar√ßo": 3, "abril": 4,
            "maio": 5, "junho": 6, "julho": 7, "agosto": 8,
            "setembro": 9, "outubro": 10, "novembro": 11, "dezembro": 12
        }
        
        for mes_nome, mes_num in meses.items():
            if mes_nome in message.lower():
                params["mes"] = mes_num
                break
        
        # Extrair ano
        year_match = re.search(r'\b(20\d{2})\b', message)
        if year_match:
            params["ano"] = int(year_match.group(1))
        
        return params
    
    def _parse_correction_intent(self, message: str) -> Dict:
        """Parse de inten√ß√µes de corre√ß√£o"""
        import re
        message_lower = message.lower()
        data = {}
        
        # Detectar que tipo de corre√ß√£o
        if any(word in message_lower for word in ["√∫ltima", "ultima", "√∫ltimo", "ultimo", "last"]):
            data['target'] = 'ultima_transacao'
        elif re.search(r'transa√ß√£o\s+(\d+)', message_lower):
            match = re.search(r'transa√ß√£o\s+(\d+)', message_lower)
            data['target'] = 'transacao_id'
            data['transacao_id'] = int(match.group(1))
        else:
            data['target'] = 'ultima_transacao'  # Default
        
        # Detectar novo valor
        valor_match = re.search(r'(?:para|valor)\s*r?\$?\s*(\d+(?:,\d+)?(?:\.\d+)?)', message_lower)
        if valor_match:
            data['novo_valor'] = float(valor_match.group(1).replace(',', '.'))
        
        # Detectar nova descri√ß√£o
        desc_match = re.search(r'(?:descri√ß√£o|para)\s+"([^"]+)"', message_lower)
        if desc_match:
            data['nova_descricao'] = desc_match.group(1)
        
        # Detectar nova categoria
        cat_match = re.search(r'categoria\s+(?:para\s+)?(\w+)', message_lower)
        if cat_match:
            data['nova_categoria'] = cat_match.group(1)
        
        return data
    
    async def _handle_correction(self, data: Dict, user_id: int) -> Dict:
        """Processa corre√ß√£o de transa√ß√£o"""
        try:
            db = next(get_db())
            try:
                # Buscar transa√ß√£o a ser corrigida
                if data.get('target') == 'ultima_transacao':
                    # Buscar √∫ltima transa√ß√£o do usu√°rio
                    transacao = db.query(Transacao).filter(
                        Transacao.tenant_id == user_id
                    ).order_by(Transacao.data.desc()).first()
                elif data.get('target') == 'transacao_id':
                    # Buscar por ID espec√≠fico
                    transacao = db.query(Transacao).filter(
                        Transacao.id == data['transacao_id'],
                        Transacao.tenant_id == user_id
                    ).first()
                else:
                    # Default: √∫ltima transa√ß√£o
                    transacao = db.query(Transacao).filter(
                        Transacao.tenant_id == user_id
                    ).order_by(Transacao.data.desc()).first()
                
                if not transacao:
                    return {
                        'resposta': '‚ùå N√£o foi poss√≠vel encontrar a transa√ß√£o para corrigir.',
                        'fonte': 'mcp_error'
                    }
                
                # Aplicar corre√ß√µes
                alteracoes = []
                
                if 'novo_valor' in data:
                    valor_antigo = transacao.valor
                    transacao.valor = data['novo_valor']
                    alteracoes.append(f"üí∞ Valor: R$ {valor_antigo:.2f} ‚Üí R$ {data['novo_valor']:.2f}")
                
                if 'nova_descricao' in data:
                    desc_antiga = transacao.descricao
                    transacao.descricao = data['nova_descricao']
                    alteracoes.append(f"üìù Descri√ß√£o: '{desc_antiga}' ‚Üí '{data['nova_descricao']}'")
                
                if 'nova_categoria' in data:
                    # Buscar categoria
                    categoria = db.query(Categoria).filter(
                        Categoria.tenant_id == user_id,
                        Categoria.nome.ilike(f"%{data['nova_categoria']}%")
                    ).first()
                    
                    if categoria:
                        cat_antiga = transacao.categoria.nome if transacao.categoria else "Sem categoria"
                        transacao.categoria_id = categoria.id
                        alteracoes.append(f"üè∑Ô∏è Categoria: '{cat_antiga}' ‚Üí '{categoria.nome}'")
                
                if not alteracoes:
                    return {
                        'resposta': '‚ö†Ô∏è Nenhuma altera√ß√£o foi detectada. Especifique o que deseja corrigir (valor, descri√ß√£o, categoria).',
                        'fonte': 'mcp_interaction'
                    }
                
                # Salvar altera√ß√µes
                db.commit()
                db.refresh(transacao)
                
                alteracoes_texto = "\n".join(alteracoes)
                
                return {
                    'resposta': f'''‚úÖ **Transa√ß√£o corrigida com sucesso!**

üìä **Altera√ß√µes realizadas:**
{alteracoes_texto}

üéØ **Transa√ß√£o atualizada:**
üìù {transacao.descricao}
üí∞ R$ {transacao.valor:.2f}
üè∑Ô∏è {transacao.categoria.nome if transacao.categoria else "Sem categoria"}''',
                    'fonte': 'mcp_real_data',
                    'transacao_corrigida': True
                }
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao corrigir transa√ß√£o: {str(e)}")
            return {
                'resposta': f'‚ùå Erro ao corrigir transa√ß√£o: {str(e)}',
                'fonte': 'mcp_error'
            }

# Inst√¢ncia global do servi√ßo inteligente
smart_mcp_service = SmartMCPService() 